import os
import asyncio
import aiohttp
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ—Ö –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤: CHAT_ID, CHAT_ID_FRIEND, CHAT_ID_FRIEND2, ...
CHAT_IDS = [v for k, v in os.environ.items() if k.startswith("CHAT_ID") and v]

if not TELEGRAM_BOT_TOKEN or not CHAT_IDS:
    raise RuntimeError("–ù–µ–º–∞—î TELEGRAM_BOT_TOKEN –∞–±–æ –∂–æ–¥–Ω–æ–≥–æ CHAT_ID —É Variables")

# –õ—ñ–º—ñ—Ç–∫–∏ –±–µ—Ä—É—Ç—å—Å—è –∑ Variables (–∞–±–æ –¥–µ—Ñ–æ–ª—Ç–∏)
CONTRACTS = {
    "TOWNS_USDT": float(os.getenv("TOWNS_LIMIT", "0.33")),
    "K_USDT": float(os.getenv("K_LIMIT", "0.25")),
}

# –ü–æ—Ä—ñ–≥ –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ–≥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10 –æ–∑–Ω–∞—á–∞—î +10% –≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ)
PERCENT_UP = float(os.getenv("PERCENT_UP", "10"))

last_sent_price = {symbol: None for symbol in CONTRACTS}

async def send_message(text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    async with aiohttp.ClientSession() as session:
        for chat_id in CHAT_IDS:
            try:
                await session.post(url, data={"chat_id": chat_id, "text": text})
            except Exception as e:
                print(f"[send_message] error for {chat_id}: {e}")

async def get_futures_price(contract: str):
    # –¢–æ—á–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑–∞ –æ–¥–Ω–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
    url = f"https://api.gateio.ws/api/v4/futures/usdt/tickers?contract={contract}"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data:
                        return float(data[0]["last"])
        except Exception as e:
            print(f"[get_futures_price] {contract} error: {e}")
    return None

async def check_prices():
    while True:
        for contract, limit_price in CONTRACTS.items():
            price = await get_futures_price(contract)
            if price is None:
                await send_message(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {contract}")
                continue

            prev = last_sent_price[contract]
            if prev is None:
                # –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ ‚Äî —Ñ—ñ–∫—Å—É—î–º–æ –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É, –±–µ–∑ —Å–ø–∞–º—É
                last_sent_price[contract] = price
                continue

            change_pct = ((price - prev) / prev) * 100 if prev > 0 else 0.0

            if change_pct >= PERCENT_UP or price >= limit_price:
                await send_message(
                    f"üöÄ {contract}: {price} USDT\n"
                    f"–ó–º—ñ–Ω–∞ –≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–ª–µ—Ä—Ç—É: {change_pct:.2f}%\n"
                    f"–õ—ñ–º—ñ—Ç–∫–∞: {limit_price} USDT"
                )
                # –æ–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—É —Ç–æ—á–∫—É, —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–∏–π +P% —Ä–∞—Ö—É–≤–∞–≤—Å—è –≤—ñ–¥ —Ü—ñ—î—ó —Ü—ñ–Ω–∏
                last_sent_price[contract] = price

        await asyncio.sleep(60)  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ—Ö–≤–∏–ª–∏–Ω–∏

async def main():
    await send_message(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ: "
        + ", ".join(CONTRACTS.keys())
        + f"\n–£–º–æ–≤–∏: +{PERCENT_UP}% –∞–±–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç–∫–∏."
    )
    await check_prices()

if __name__ == "__main__":
    asyncio.run(main())
